{"version":3,"file":"ui-router-angular-hybrid.min.js","sources":["../src/angular-hybrid.ts"],"sourcesContent":["import * as angular from 'angular';\n\nimport { Component, ElementRef, Inject, Injector, Input, NgModule } from '@angular/core';\nimport { downgradeComponent, UpgradeModule } from '@angular/upgrade/static';\nimport '@angular/upgrade';\n\nimport {\n  StateObject, forEach, PathNode, Resolvable, StateRegistry, UIRouter, ViewConfig, ViewService\n} from '@uirouter/core';\n\nimport {\n  applyModuleConfig, NATIVE_INJECTOR_TOKEN, ng2LazyLoadBuilder, Ng2ViewConfig, UIView, _UIROUTER_SERVICE_PROVIDERS,\n  Ng2ViewDeclaration, ParentUIViewInject, StatesModule, UIROUTER_MODULE_TOKEN, UIROUTER_ROOT_MODULE, UIRouterModule,\n} from '@uirouter/angular';\n\nimport { $InjectorLike, Ng1ViewConfig } from '@uirouter/angularjs';\n\nimport { UIRouterRx } from '@uirouter/rx';\n\n/**\n * Create a ng1 module for the ng1 half of the hybrid application to depend on.\n *\n * Example:\n * const myApp = angular.module('myApp', ['ui.router.upgrade']);\n */\nexport const upgradeModule = angular.module('ui.router.upgrade', ['ui.router']);\n\n/**\n * UIViewNgUpgrade is a component bridge from ng1 ui-view to ng2 ui-view\n *\n * When a ui-router for ng1 is registering a state it checks if a view's\n * `component:` is an ng2 Component class. If so, it creates a special ng1 template\n * which references this component, i.e., <ui-view-ng-upgrade></ui-view-ng-upgrade>\n *\n * See that code by searching ng1-to-ng2 source for: \"$stateProvider.decorator\"\n *\n * ---\n *\n * ng1-to-ng2 component bridge process:\n *\n * 1)\n * When an ng1 template creates a ui-view which is targeted by a ng2 Component,\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ui-view created in ng1 template -->\n * </div> <!-- targeted with { component: Ng2RoutedComponent } -->\n * ```\n *\n * the state decorator spits out a custom template.  That template loads this\n * ng2 Component adapter as a downgraded-to-ng1 directive.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- decorated template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- downgraded adapter component -->\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This downgraded ng2 Component then creates a child UIView (ng2 component)\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- custom template references the downgraded component -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter downgraded to ng1-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *      </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * which in turn is filled with the routed ng2 component.\n *\n * ```\n * <a ui-sref=\"foo\">Go to foo</a>\n * <div ui-view> <!-- ng1 ui-view -->\n *   <ui-view-ng-upgrade> <!-- ng2 component adapter (downgraded to ng1)-->\n *     <ui-view> <!-- pure ng2 ui-view -->\n *       <ng2-routed-component> <!-- ng2 component hosted in ng2 ui-view -->\n *         <h1>ng2 routed component contents</h1>\n *       </ng2-routed-component>\n *     </ui-view>\n *   </ui-view-ng-upgrade>\n * </div>\n * ```\n *\n * This adapter exposes exposes the parent view context (ParentUIViewInject)\n * as an ng2 DI Provider, which the nested ng2 UIView requires.\n *\n * It gets the ParentUIViewContext information (from the parent ng1 ui-view) by walking\n * up the DOM and grabbing the .data('$uiView') which the ng1 ui-view directive exposes.\n */\n@Component({\n  selector: 'ui-view-ng-upgrade',\n  template: `<ui-view [name]=\"name\"></ui-view>`,\n  // provide a blank object as PARENT_INJECT.\n  // The component will add property getters when it is constructed.\n  viewProviders: [ { provide: UIView.PARENT_INJECT, useValue: { } } ],\n})\nexport class UIViewNgUpgrade {\n  // The ui-view's name (or '$default')\n  @Input() name: string;\n\n  constructor(\n      ref: ElementRef,\n      @Inject(UIView.PARENT_INJECT) parent: ParentUIViewInject,\n      registry: StateRegistry // access the root state\n  ) {\n    // From the ui-view-ng-upgrade component's element ref, walk up the DOM two elements...\n    // There will first be an ng1 ui-view which hosts this element, and then that ui-view's parent element.\n    // That (parent) element has access to the proper \"parent viewcontext\"\n\n    // The ng2 ui-view component is inside this ui-view-ng-upgrade directive, which is inside the ng1 \"host\" ui-view.\n    // Both ui-views share the same \"view context\" information (the view's fqn and created-by-state context information)\n    const ng1elem = angular.element(ref.nativeElement).parent().parent();\n\n    // Expose getters on PARENT_INJECT for context (creation state) and fqn (view address)\n    // These will be used by further nested UIView\n    Object.defineProperty(parent, \"context\", {\n      get: function() {\n        const data = ng1elem['inheritedData']('$uiView');\n        return (data && data.$cfg) ? data.$cfg.viewDecl.$context : registry.root();\n      },\n      enumerable: true\n    });\n\n    Object.defineProperty(parent, \"fqn\", {\n      get: function() {\n        const data = ng1elem['inheritedData']('$uiView');\n        return (data && data.$uiView) ? data.$uiView.fqn : null;\n      },\n      enumerable: true\n    });\n  }\n}\n\n/**********************************\n * Ng2 @NgModule and bootstrap code\n **********************************/\n\n// Register the ng1 DI '$uiRouter' object as an ng2 Provider.\nexport function uiRouterUpgradeFactory(router: UIRouter, injector: Injector) {\n  const modules: StatesModule[] = injector.get(UIROUTER_MODULE_TOKEN, []);\n  modules.forEach(module => applyModuleConfig(router, injector, module));\n  return router;\n}\n\nexport function getUIRouter($injector: any) {\n  return $injector.get('$uiRouter');\n}\n\nexport function getParentUIViewInject(r: StateRegistry): ParentUIViewInject {\n  return { fqn: null, context: r.root() };\n}\n\n/**\n * This NgModule should be added to the root module of the hybrid app.\n */\n@NgModule({\n  imports: [UIRouterModule, UpgradeModule],\n  declarations: [UIViewNgUpgrade],\n  providers: [\n    // @uirouter/angular code will use the ng1 $uiRouter instance instead of creating its own.\n    { provide: '$uiRouter', useFactory: getUIRouter, deps: ['$injector']},\n\n    { provide: UIRouter, useFactory: uiRouterUpgradeFactory, deps: ['$uiRouter', Injector] },\n\n    { provide: UIROUTER_ROOT_MODULE, useValue: {}, multi: true },\n\n    { provide: UIView.PARENT_INJECT, useFactory: getParentUIViewInject, deps: [StateRegistry] },\n\n    ..._UIROUTER_SERVICE_PROVIDERS,\n  ],\n  entryComponents: [\n    UIViewNgUpgrade\n  ],\n  exports: [UIViewNgUpgrade, UIRouterModule]\n}) export class UIRouterUpgradeModule {}\n\n// Downgrade the UIViewNgUpgrade ng2 Component to an ng1 directive.\n// The directive is used in a (generated) view template by the (host) ng1 ui-router,\n// whenever it finds a view configured with a `component: <Ng2ComponentClass>`\nupgradeModule.directive(\"uiViewNgUpgrade\", <any> downgradeComponent({ \n  component: UIViewNgUpgrade,\n  inputs: ['name']\n}));\n\nupgradeModule.run(['$injector', (ng1Injector: $InjectorLike) => {\n  const $uiRouter: UIRouter = ng1Injector.get('$uiRouter');\n\n  /** Add support for observable state and param changes */\n  $uiRouter.plugin(UIRouterRx);\n\n  // Expose a merged ng1/ng2 injector as a Resolvable (on the root state).\n  // This mimics how ui-router-ng2 exposes the root ng2 Injector, but\n  // it retrieves from ng1 injector first, then ng2 injector if the token isn't found.\n  const mergedInjector = {\n    get: function(token: any, ng2NotFoundValue?: any) {\n      const ng2Injector = ng1Injector.get('$$angularInjector');\n      return (ng1Injector.has(token) && ng1Injector.get(token)) || ng2Injector.get(token, ng2NotFoundValue)\n    }\n  };\n\n  const ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, mergedInjector);\n  $uiRouter.stateRegistry.root().resolvables.push(ng2InjectorResolvable);\n}]);\n\n/** Adds support for `loadChildren`: Angular NgModule lazy loading via @gntools/webpack */\nupgradeModule.config(['$stateRegistryProvider', ($stateRegistry: StateRegistry) => {\n  $stateRegistry.decorator('lazyLoad', ng2LazyLoadBuilder);\n}]);\n\n/**\n * Define a stateProvider `views` builder decorator.\n * The decorator first applies the standard views builder function.\n * Then it finds any view components which are **actually** a Ng2 Component Class.\n * It overwrites that view's config with a ng1-to-ng2 hybrid config.\n *\n * In place of the template provider, it simply puts a <ui-view-ng-upgrade/> component\n * which that provides a ng1 -> ng2 boundary in the component tree.\n */\nupgradeModule.config(['$stateRegistryProvider', ($stateRegistry: StateRegistry) => {\n  $stateRegistry.decorator('views', function(state: StateObject, parentFn: Function) {\n    const views = parentFn(state);\n\n    forEach(views, (viewDecl: any, viewName: string) => {\n      if (viewDecl.$type === 'ng1-to-ng2' || typeof viewDecl.component === 'function') {\n        // Update the view config.\n        // Override default ng1 `component:` behavior (of defining a templateProvider)\n        // with a <ui-view-ng-upgrade> adapter directive template\n        viewDecl.$type = \"ng1-to-ng2\";\n        viewDecl.templateProvider = null;\n        viewDecl.template = `<ui-view-ng-upgrade name='${viewDecl.$uiViewName}'></ui-view-ng-upgrade>`;\n      }\n    });\n    return views;\n  });\n}]);\n\n// UI-Router ViewConfig factories take a view declaration object from a state.views: { foo: <ViewDeclaration> }\n// and return a runtime config object (a ViewConfig)\nupgradeModule.run(['$view', '$templateFactory', ($view: ViewService, $templateFactory: any) => {\n  // Register a ViewConfig factory for views of type `ng2`\n  $view._pluginapi._viewConfigFactory('ng2', (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config));\n\n  // Register a ViewConfig factory for views of type `ng1-to-ng2`.\n  // Returns both an ng1 config and an ng2 config allowing either ng1 or ng2 ui-view components to be targeted.\n  $view._pluginapi._viewConfigFactory('ng1-to-ng2', (path: PathNode[], config: Ng2ViewDeclaration) => {\n    const ng1ViewConfig: ViewConfig = <any> new Ng1ViewConfig(<any> path, <any> Object.assign({}, config, { $type: 'ng1'}), $templateFactory);\n    const ng2ViewConfig: ViewConfig = <any> new Ng2ViewConfig(<any> path, <any> Object.assign({}, config, { $type: 'ng2'}));\n\n    return [ ng2ViewConfig, ng1ViewConfig ];\n  });\n}]);\n"],"names":["router","injector","get","UIROUTER_MODULE_TOKEN","forEach","module","applyModuleConfig","$injector","r","fqn","context","root","upgradeModule","angular.module","ref","parent","registry","ng1elem","angular.element","nativeElement","Object","defineProperty","data","$cfg","viewDecl","$context","enumerable","$uiView","type","Component","args","selector","template","viewProviders","provide","UIView","PARENT_INJECT","useValue","UIViewNgUpgrade","ElementRef","undefined","decorators","Inject","StateRegistry","name","Input","NgModule","imports","UIRouterModule","UpgradeModule","declarations","providers","useFactory","getUIRouter","deps","UIRouter","uiRouterUpgradeFactory","Injector","UIROUTER_ROOT_MODULE","multi","getParentUIViewInject","_UIROUTER_SERVICE_PROVIDERS","entryComponents","exports","UIRouterUpgradeModule","directive","downgradeComponent","component","inputs","run","ng1Injector","$uiRouter","plugin","UIRouterRx","mergedInjector","token","ng2NotFoundValue","ng2Injector","has","ng2InjectorResolvable","Resolvable","fromData","NATIVE_INJECTOR_TOKEN","stateRegistry","resolvables","push","config","$stateRegistry","decorator","ng2LazyLoadBuilder","state","parentFn","views","viewName","$type","templateProvider","$uiViewName","$view","$templateFactory","_pluginapi","_viewConfigFactory","path","Ng2ViewConfig","ng1ViewConfig","Ng1ViewConfig","assign"],"mappings":"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"}